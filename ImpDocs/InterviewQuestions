LeetCode problems
https://github.com/cherryljr/LeetCode
https://github.com/varunu28/LeetCode-Java-Solutions/tree/master/Easy
https://github.com/connectaman/Solution-for-Various-Problem-Statement-in-Java-

Scheduler Type
Operators
What if nothing is provided while implementing RxJava
	Scheduler.DEFAULT
Multicast in RxJava.
Map vs FlatMap
SwitchMap
SubscribeOn and ObserverOn

Coroutines
-------------------
mapping of jvm level thread.
suspend working
coroutine context.
coroutine scopes
coroutine dispatcher
coroutine is single thread or multi thread
how suspend is different from normal functions.
cancellation of coroutines


Architecture and design
----------------------
MvvM or Mvp or why MVVM ?
ViewModel
Holder fragment


Views and Custom views
--------------------------
Recyclerview recycle pool
layout manager, view scrap
Object animator vs Value animation.
How inflate works in Android.
Custom Views
How does view engine renders the view
layout manager draw, how do they communicate ?


Multithreading & Background processing.
-------------------------------------
countdown latch
how to communicate between two threads
custom locking - reenrant
Android Api for networking operation (AsyncTask)
Service with thread, work manager
download n images and show progress on main thread.
difference between thread and asyncTask

RxJava
-------------
Types of RxObserver
Observable
backpressure strategy
activity retrain instance
solid principle  (Single Responsibility, open/close, liskov substitution, interface segregation, dependency inversion)
design patterns

Others
----------
Memory leaks and how to protect and detect.
How to rollout particular feature
Unit Testing
Current Project challenges
ANR, how to detect and protect.
Crashlytics implementation, what if you need to develop your own crashlytics.


Java
-----------
Immutability, Singleton
Memory Management (Types of memory in jvm)
Variables are created in which memory
write your own handler functionality using thread or other(plz mention)

Kotlin
--------
Coroutines, Suspend vs normal method,
extension, higher order and inline functions

Android
-----------
components,Activitylifecycle
Livedata, ViewModel,
Room, Sqlite, Realm,ORMs,
Dagger/Kodein/Koin


==================================================================================================================================================================
Activities :
A-B-C-D-E-F
onBackPressed()
F-D-C-E-B-A   (HOW TO ACHIEVE THIS)

LruBitmap (Which data structure used)
how to create Stack from Queue

Git:
Squash and fixup
Rebase and merge, and stash

Difference between add and replace fragment:
-----------------------
replace removes the existing fragment and adds a new fragment. This means when you press back button the fragment that got replaced will
be created with its onCreateView being invoked.

Whereas add retains the existing fragments and adds a new fragment that means existing fragment will be active and they wont be in 'paused'
state hence when a back button is pressed onCreateView is not called for the existing fragment

In terms of fragment's life cycle events  onPause, onResume, onCreateView and other life cycle events will be invoked in case of replace
but they wont be invoked in case of add.