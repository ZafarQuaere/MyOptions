

Sealed Class :
https://android.jlelse.eu/kotlin-what-is-a-sealed-classe-1e535c416519
It’s a kind of ADT(Algebraic Data Type), used for representing restricted class hierarchies, also allowing a datatype to be
one of a predefined set of types.


Sealed classes have another distinct feature, their constructors are private by default. A sealed class is implicitly
abstract and hence it cannot be instantiated. Like abstract classes, sealed classes allow us to represent hierarchies,
child classes can be of any type, data class, object class, any regular class, or even another sealed class. But unlike abstract
classes, we need to define these hierarchies in the same file or as nested classes.


The concept of Sealed classes is pretty similar to that of enums, sealed classes represent restricted class hierarchies,
i.e, our class can have a specific number of subclasses

Unlike the Enum class, the sealed class can have states, as we can have several objects of the same class.


In Kotlin context we can also use sealed classes combined with when expression.

sealed class NetworkResult<T>(val data: T? = null, val message: String? = null) {

    class Success<T>(data: T) : NetworkResult<T>(data)
    class Error<T>(message: String, data: T? = null) : NetworkResult<T>(data, message)
    class Loading<T> : NetworkResult<T>()
}


Maybe you’re asking yourself: “Does the sealed classes have the same behavior as enum classes?” The answer is almost yes.

