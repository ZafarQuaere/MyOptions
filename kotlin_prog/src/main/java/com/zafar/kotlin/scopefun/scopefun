Scope functions in Kotlin (L-A-R-W-A) Let's run with apply also.

1) let {} :->
2) apply{}
3) run {} :->
4) with{}
5) also {}

run{} -> run is a combination of let and with as it prevents from NPE and use this object for manipulation
    returns : lambda
    Context : this

with{} -> if you want to operate on non null object
    returns : lambda (last statement of lambda function)
    Context : this

let{} ->
    returns : lambda
    Context : it
apply{} ->
    returns : Context (Object)
    Context : this
also{} ->
    returns: Context (Object)
    Context : it

with{} -> if you want to operate on NON-NUllable object
let{} -> if you want to execute lambda expression on nullable object and want to avoid NPE
run{} -> if you want to execute lambda expression on nullable object and want to avoid NPE, it is a combination of let and with as it prevents from NPE and execute lambda expression on nullable object.
apply{} -> if you want to initialize and configure an object.
also{}-> if you want to do some additional object configuration or operation.

There are mainly two differences among these functions:

Way of referring to a context object (i.e. using either ‘this’ or ‘it’ keyword)
return value (i.e. returns either ‘context object’ or ‘lambda result’)


Function        Object Reference        Return Value
let             it                      Lambda result
run             this                    Lambda result
with            this                    Lambda result

apply           this                    Context object
also            it                      Context object

Summary
Scope functions make code more readable, clear and concise.
Object reference – ‘this’ and ‘it’.
Return value – context object and lambda result.

let   : working with nullable objects to avoid NullPointerException.
run   : operate on nullable object, executing lambda expressions.
with  : operating on non-null objects.
apply : changing object configuration.
also  : adding additional operations.
